<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1LoggerFilter" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::LoggerFilter</compoundname>
    <basecompoundref refid="classCppLogging_1_1Filter" prot="public" virt="non-virtual">CppLogging::Filter</basecompoundref>
    <includes refid="logger__filter_8h" local="no">logger_filter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1LoggerFilter_1aa7dd51b91c93ce5d56f8b434cc332338" prot="private" static="no" mutable="no">
        <type>std::regex</type>
        <definition>std::regex CppLogging::LoggerFilter::_pattern</definition>
        <argsstring></argsstring>
        <name>_pattern</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="44" column="1" bodyfile="include/logging/filters/logger_filter.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1ad443fda68370bac29bb4a47fb658024c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CppLogging::LoggerFilter::LoggerFilter</definition>
        <argsstring>(const std::regex &amp;pattern)</argsstring>
        <name>LoggerFilter</name>
        <param>
          <type>const std::regex &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Initialize logger filter with a given regular expression pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>- Regular expression pattern </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="32" column="1" bodyfile="include/logging/filters/logger_filter.h" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1adee52e6aa43af9bee7fb1cbfd60cc6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::LoggerFilter::LoggerFilter</definition>
        <argsstring>(const LoggerFilter &amp;)=delete</argsstring>
        <name>LoggerFilter</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1a2e2883ae711cfef53783e2c558efe2b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::LoggerFilter::LoggerFilter</definition>
        <argsstring>(LoggerFilter &amp;&amp;) noexcept=default</argsstring>
        <name>LoggerFilter</name>
        <param>
          <type><ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1ab4f9d323690da99887cc13d0526f4771" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::LoggerFilter::~LoggerFilter</definition>
        <argsstring>()=default</argsstring>
        <name>~LoggerFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1ac777edb3eebbb35fad06f94758743534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;</type>
        <definition>LoggerFilter&amp; CppLogging::LoggerFilter::operator=</definition>
        <argsstring>(const LoggerFilter &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1afc2a4d9d8311d3038f85c71e69cf787f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;</type>
        <definition>LoggerFilter&amp; CppLogging::LoggerFilter::operator=</definition>
        <argsstring>(LoggerFilter &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1LoggerFilter" kindref="compound">LoggerFilter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1LoggerFilter_1a8dd29c033a83741a576730e0e4645372" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool CppLogging::LoggerFilter::FilterRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>FilterRecord</name>
        <reimplements refid="classCppLogging_1_1Filter_1af8e8cba41c936d1d3c10476091bd44b2">FilterRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para><ref refid="classCppLogging_1_1Filter" kindref="compound">Filter</ref> the given logging record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;true&apos; if the logging record should be processed, &apos;false&apos; if the logging record was filtered out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/filters/logger_filter.h" line="41" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> filter. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> filters out logging records which logger filed is not matched to the given regular expression pattern.</para>
<para>Thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="60">
        <label>CppLogging::Filter</label>
        <link refid="classCppLogging_1_1Filter"/>
      </node>
      <node id="59">
        <label>CppLogging::LoggerFilter</label>
        <link refid="classCppLogging_1_1LoggerFilter"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="62">
        <label>CppLogging::Filter</label>
        <link refid="classCppLogging_1_1Filter"/>
      </node>
      <node id="61">
        <label>CppLogging::LoggerFilter</label>
        <link refid="classCppLogging_1_1LoggerFilter"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/logging/filters/logger_filter.h" line="26" column="1" bodyfile="include/logging/filters/logger_filter.h" bodystart="25" bodyend="45"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1LoggerFilter_1aa7dd51b91c93ce5d56f8b434cc332338" prot="private" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>_pattern</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1a8dd29c033a83741a576730e0e4645372" prot="public" virt="virtual"><scope>CppLogging::LoggerFilter</scope><name>FilterRecord</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1ad443fda68370bac29bb4a47fb658024c" prot="public" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>LoggerFilter</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1adee52e6aa43af9bee7fb1cbfd60cc6db" prot="public" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>LoggerFilter</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1a2e2883ae711cfef53783e2c558efe2b8" prot="public" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>LoggerFilter</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1ac777edb3eebbb35fad06f94758743534" prot="public" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1afc2a4d9d8311d3038f85c71e69cf787f" prot="public" virt="non-virtual"><scope>CppLogging::LoggerFilter</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1LoggerFilter_1ab4f9d323690da99887cc13d0526f4771" prot="public" virt="virtual"><scope>CppLogging::LoggerFilter</scope><name>~LoggerFilter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
