<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1Logger" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::Logger</compoundname>
    <includes refid="logger_8h" local="no">logger.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classCppLogging_1_1Logger_1ac3da7e21a05bf8852638db7e4dd1b81a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Config</definition>
        <argsstring></argsstring>
        <name>Config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="24" column="1" bodyfile="include/logging/logger.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1Logger_1a8396574ca489e08354bef7bd0869ee21" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string CppLogging::Logger::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="90" column="1" bodyfile="include/logging/logger.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCppLogging_1_1Logger_1a74a2bc6af8eea38166c2e8856ff88f8b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classCppLogging_1_1Processor" kindref="compound">Processor</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Processor&gt; CppLogging::Logger::_sink</definition>
        <argsstring></argsstring>
        <name>_sink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="91" column="1" bodyfile="include/logging/logger.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a58a1e9064c3f8e0ae7e0dfce50e9208e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::Logger</definition>
        <argsstring>()</argsstring>
        <name>Logger</name>
        <briefdescription>
<para>Initialize default logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1ad9b721a319c0c1bb2fefc6a79eaeae7a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::Logger</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Initialize named logger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a1ac515ed40215b9798999543464f7dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::Logger</definition>
        <argsstring>(const Logger &amp;)=default</argsstring>
        <name>Logger</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a5669599c20c943addbe09b32969bf480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::Logger</definition>
        <argsstring>(Logger &amp;&amp;)=default</argsstring>
        <name>Logger</name>
        <param>
          <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1ae942d1dd474621a50870c9124942af1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::~Logger</definition>
        <argsstring>()</argsstring>
        <name>~Logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1af04f606b5190b4e52f4777a7f52b92ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; CppLogging::Logger::operator=</definition>
        <argsstring>(const Logger &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1afec405e8069f965b1a12e35d6923c4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; CppLogging::Logger::operator=</definition>
        <argsstring>(Logger &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1ab618fb4b454dadd7602bd00719216e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Debug</definition>
        <argsstring>(const char *debug, const Args &amp;... args)</argsstring>
        <name>Debug</name>
        <param>
          <type>const char *</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log debug message with format arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Will log only in debug mode!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>debug</parametername>
</parameternamelist>
<parameterdescription>
<para>- Debug message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1ad8e3ccfb7e51713e6f4d70ea4c5e90c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Info</definition>
        <argsstring>(const char *info, const Args &amp;... args)</argsstring>
        <name>Info</name>
        <param>
          <type>const char *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log information message with format arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>- Information message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a65f1b207d94ef1afdb7853278b28c8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Warn</definition>
        <argsstring>(const char *warn, const Args &amp;... args)</argsstring>
        <name>Warn</name>
        <param>
          <type>const char *</type>
          <declname>warn</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log warning message with format arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>warn</parametername>
</parameternamelist>
<parameterdescription>
<para>- Warning message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a29beea93f046e04348f2a47dcd3e3603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Error</definition>
        <argsstring>(const char *error, const Args &amp;... args)</argsstring>
        <name>Error</name>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log error message with format arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>- Error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a58bc9d9e9f3c6661d5ede031e595ad4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Fatal</definition>
        <argsstring>(const char *fatal, const Args &amp;... args)</argsstring>
        <name>Fatal</name>
        <param>
          <type>const char *</type>
          <declname>fatal</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log fatal message with format arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>- Fatal message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a4e1bbe2cc3ce64079aae8c5f467fbb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CppLogging::Logger::Flush</definition>
        <argsstring>()</argsstring>
        <name>Flush</name>
        <briefdescription>
<para>Flush the current logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1ae0513995cc4acc8757837219cbcec616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CppLogging::Logger::Update</definition>
        <argsstring>()</argsstring>
        <name>Update</name>
        <briefdescription>
<para>Update the current logger sink by taking the most recent one from configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="87" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a07121c37d846926dd5f3cfb404314cb8" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Logger::Logger</definition>
        <argsstring>(const std::string &amp;name, const std::shared_ptr&lt; Processor &gt; &amp;sink)</argsstring>
        <name>Logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classCppLogging_1_1Processor" kindref="compound">Processor</ref> &gt; &amp;</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Initialize logger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> sink processor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Logger_1a8689879af1732f31247ddeaaeda3fa2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CppLogging::Logger::Log</definition>
        <argsstring>(Level level, const char *message, const Args &amp;... args)</argsstring>
        <name>Log</name>
        <param>
          <type><ref refid="namespaceCppLogging_1ac4e889a814b82af010ef93be2e618f3b" kindref="member">Level</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log the given message with a given level and format arguments list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Format arguments list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/logger.h" line="107" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> interface. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> is a main interface to produce logging records with a desired level.</para>
<para>Thread-safe or not thread-safe depends on the current logging sink. </para>
    </detaileddescription>
    <location file="include/logging/logger.h" line="23" column="1" bodyfile="include/logging/logger.h" bodystart="22" bodyend="108"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1Logger_1a8396574ca489e08354bef7bd0869ee21" prot="private" virt="non-virtual"><scope>CppLogging::Logger</scope><name>_name</name></member>
      <member refid="classCppLogging_1_1Logger_1a74a2bc6af8eea38166c2e8856ff88f8b" prot="private" virt="non-virtual"><scope>CppLogging::Logger</scope><name>_sink</name></member>
      <member refid="classCppLogging_1_1Logger_1ac3da7e21a05bf8852638db7e4dd1b81a" prot="private" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Config</name></member>
      <member refid="classCppLogging_1_1Logger_1ab618fb4b454dadd7602bd00719216e53" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Debug</name></member>
      <member refid="classCppLogging_1_1Logger_1a29beea93f046e04348f2a47dcd3e3603" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Error</name></member>
      <member refid="classCppLogging_1_1Logger_1a58bc9d9e9f3c6661d5ede031e595ad4d" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Fatal</name></member>
      <member refid="classCppLogging_1_1Logger_1a4e1bbe2cc3ce64079aae8c5f467fbb04" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1Logger_1ad8e3ccfb7e51713e6f4d70ea4c5e90c6" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Info</name></member>
      <member refid="classCppLogging_1_1Logger_1a8689879af1732f31247ddeaaeda3fa2c" prot="private" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Log</name></member>
      <member refid="classCppLogging_1_1Logger_1a58a1e9064c3f8e0ae7e0dfce50e9208e" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Logger</name></member>
      <member refid="classCppLogging_1_1Logger_1ad9b721a319c0c1bb2fefc6a79eaeae7a" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Logger</name></member>
      <member refid="classCppLogging_1_1Logger_1a1ac515ed40215b9798999543464f7dd2" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Logger</name></member>
      <member refid="classCppLogging_1_1Logger_1a5669599c20c943addbe09b32969bf480" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Logger</name></member>
      <member refid="classCppLogging_1_1Logger_1a07121c37d846926dd5f3cfb404314cb8" prot="private" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Logger</name></member>
      <member refid="classCppLogging_1_1Logger_1af04f606b5190b4e52f4777a7f52b92ae" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Logger_1afec405e8069f965b1a12e35d6923c4dc" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Logger_1ae0513995cc4acc8757837219cbcec616" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Update</name></member>
      <member refid="classCppLogging_1_1Logger_1a65f1b207d94ef1afdb7853278b28c8a2" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>Warn</name></member>
      <member refid="classCppLogging_1_1Logger_1ae942d1dd474621a50870c9124942af1c" prot="public" virt="non-virtual"><scope>CppLogging::Logger</scope><name>~Logger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
