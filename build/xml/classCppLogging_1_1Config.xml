<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1Config" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::Config</compoundname>
    <includes refid="config_8h" local="no">config.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1Config_1ae4b739246642292fa601882ae6f12542" prot="private" static="no" mutable="no">
        <type>CppCommon::CriticalSection</type>
        <definition>CppCommon::CriticalSection CppLogging::Config::_lock</definition>
        <argsstring></argsstring>
        <name>_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="65" column="1" bodyfile="include/logging/config.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCppLogging_1_1Config_1a9173d77bbff55bc37a20f6ec370ac4af" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::shared_ptr&lt; <ref refid="classCppLogging_1_1Processor" kindref="compound">Processor</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::shared_ptr&lt;Processor&gt; &gt; CppLogging::Config::_config</definition>
        <argsstring></argsstring>
        <name>_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="66" column="1" bodyfile="include/logging/config.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1Config_1a36b0110d0dab4d9ff1a273ee527b03d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Config::Config</definition>
        <argsstring>(const Config &amp;)=delete</argsstring>
        <name>Config</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1ab49e7effb10954f0f8740c5be34f4f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Config::Config</definition>
        <argsstring>(Config &amp;&amp;) noexcept=delete</argsstring>
        <name>Config</name>
        <param>
          <type><ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a4f5b9a09720c1a71122aa3d4da508f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Config::~Config</definition>
        <argsstring>()</argsstring>
        <name>~Config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a583607e732125191fb8f98c0bedc5b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;</type>
        <definition>Config&amp; CppLogging::Config::operator=</definition>
        <argsstring>(const Config &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a73ea0a69e554f01d3dff0defdd6c8392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;</type>
        <definition>Config&amp; CppLogging::Config::operator=</definition>
        <argsstring>(Config &amp;&amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="32" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classCppLogging_1_1Config_1a3e11328b2fe2b62471dfd372e7dfbd0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CppLogging::Config::ConfigLogger</definition>
        <argsstring>(const std::shared_ptr&lt; Processor &gt; &amp;sink)</argsstring>
        <name>ConfigLogger</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classCppLogging_1_1Processor" kindref="compound">Processor</ref> &gt; &amp;</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Configure default logger with a given logging sink processor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging sink processor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a71e3242884831c96abc4ea6ca82cdaaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CppLogging::Config::ConfigLogger</definition>
        <argsstring>(const std::string &amp;name, const std::shared_ptr&lt; Processor &gt; &amp;sink)</argsstring>
        <name>ConfigLogger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classCppLogging_1_1Processor" kindref="compound">Processor</ref> &gt; &amp;</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Configure named logger with a given logging sink processor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging sink processor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a4c255f6c6f836c50e08c15656d5b86eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref></type>
        <definition>static Logger CppLogging::Config::CreateLogger</definition>
        <argsstring>()</argsstring>
        <name>CreateLogger</name>
        <briefdescription>
<para>Create default logger. </para>
        </briefdescription>
        <detaileddescription>
<para>If the default logger was not configured before it will be automatically configured to a one with <ref refid="classCppLogging_1_1TextLayout" kindref="compound">TextLayout</ref> and <ref refid="classCppLogging_1_1ConsoleAppender" kindref="compound">ConsoleAppender</ref>.</para>
<para><simplesect kind="return"><para>Created instance of the default logger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1Config_1a433acbb0079012db113cd43ba4030f57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref></type>
        <definition>static Logger CppLogging::Config::CreateLogger</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>CreateLogger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create named logger. </para>
        </briefdescription>
        <detaileddescription>
<para>If the named logger was not configured before an instance of the default logger will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Created instance of the named logger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="62" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCppLogging_1_1Config_1ac186d1775126efa0984c5ec5c6cb22d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::Config::Config</definition>
        <argsstring>()=default</argsstring>
        <name>Config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="68" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classCppLogging_1_1Config_1a124f7632a0d72ed179882f803660132f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1Config" kindref="compound">Config</ref> &amp;</type>
        <definition>static Config&amp; CppLogging::Config::GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
<para>Get singleton instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/config.h" line="71" column="1" bodyfile="include/logging/config.h" bodystart="71" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> configuration static class. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classCppLogging_1_1Logger" kindref="compound">Logger</ref> configuration provides static interface to configure loggers.</para>
<para>Thread-safe. </para>
    </detaileddescription>
    <location file="include/logging/config.h" line="25" column="1" bodyfile="include/logging/config.h" bodystart="24" bodyend="73"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1Config_1a9173d77bbff55bc37a20f6ec370ac4af" prot="private" virt="non-virtual"><scope>CppLogging::Config</scope><name>_config</name></member>
      <member refid="classCppLogging_1_1Config_1ae4b739246642292fa601882ae6f12542" prot="private" virt="non-virtual"><scope>CppLogging::Config</scope><name>_lock</name></member>
      <member refid="classCppLogging_1_1Config_1a36b0110d0dab4d9ff1a273ee527b03d8" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>Config</name></member>
      <member refid="classCppLogging_1_1Config_1ab49e7effb10954f0f8740c5be34f4f0b" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>Config</name></member>
      <member refid="classCppLogging_1_1Config_1ac186d1775126efa0984c5ec5c6cb22d2" prot="private" virt="non-virtual"><scope>CppLogging::Config</scope><name>Config</name></member>
      <member refid="classCppLogging_1_1Config_1a3e11328b2fe2b62471dfd372e7dfbd0a" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>ConfigLogger</name></member>
      <member refid="classCppLogging_1_1Config_1a71e3242884831c96abc4ea6ca82cdaaa" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>ConfigLogger</name></member>
      <member refid="classCppLogging_1_1Config_1a4c255f6c6f836c50e08c15656d5b86eb" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>CreateLogger</name></member>
      <member refid="classCppLogging_1_1Config_1a433acbb0079012db113cd43ba4030f57" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>CreateLogger</name></member>
      <member refid="classCppLogging_1_1Config_1a124f7632a0d72ed179882f803660132f" prot="private" virt="non-virtual"><scope>CppLogging::Config</scope><name>GetInstance</name></member>
      <member refid="classCppLogging_1_1Config_1a583607e732125191fb8f98c0bedc5b3b" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Config_1a73ea0a69e554f01d3dff0defdd6c8392" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Config_1a4f5b9a09720c1a71122aa3d4da508f27" prot="public" virt="non-virtual"><scope>CppLogging::Config</scope><name>~Config</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
