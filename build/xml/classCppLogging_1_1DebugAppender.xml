<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1DebugAppender" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::DebugAppender</compoundname>
    <basecompoundref refid="classCppLogging_1_1Appender" prot="public" virt="non-virtual">CppLogging::Appender</basecompoundref>
    <includes refid="debug__appender_8h" local="no">debug_appender.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1a904ca30b987c25394616706f2f61093f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::DebugAppender::DebugAppender</definition>
        <argsstring>()=default</argsstring>
        <name>DebugAppender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1aa86c3ffb7964bacfafbc7590048c9848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::DebugAppender::DebugAppender</definition>
        <argsstring>(const DebugAppender &amp;)=delete</argsstring>
        <name>DebugAppender</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1a30d386a7516fbefdbd5909204f92a5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::DebugAppender::DebugAppender</definition>
        <argsstring>(DebugAppender &amp;&amp;) noexcept=default</argsstring>
        <name>DebugAppender</name>
        <param>
          <type><ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1a84021216a9e86c376aef4f8d8297ba01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::DebugAppender::~DebugAppender</definition>
        <argsstring>()=default</argsstring>
        <name>~DebugAppender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1adf0a9b8d9b6e220c11533b0c03f37105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;</type>
        <definition>DebugAppender&amp; CppLogging::DebugAppender::operator=</definition>
        <argsstring>(const DebugAppender &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1ad26b8bd8959fea55899db40f882ef2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;</type>
        <definition>DebugAppender&amp; CppLogging::DebugAppender::operator=</definition>
        <argsstring>(DebugAppender &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1DebugAppender" kindref="compound">DebugAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1a18b6456537f6321a60810a6e3155e831" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::DebugAppender::AppendRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>AppendRecord</name>
        <reimplements refid="classCppLogging_1_1Appender_1a770dfe9cd6d1f22a66582bed758a7b4e">AppendRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para>Append the given logging record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1DebugAppender_1a0e68133c51712cf186cea65ea8e4ddb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::DebugAppender::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classCppLogging_1_1Appender_1a6f6ebd942c5045e8b07d100fe5656ee6">Flush</reimplements>
        <briefdescription>
<para>Flush the logging appender. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/debug_appender.h" line="38" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Debug appender. </para>
    </briefdescription>
    <detaileddescription>
<para>Debug appender prints the given logging record into the attached debugger if present for Windows system. Under Unix systems this appender prints the given logging record into the system error stream (stderr).</para>
<para>Thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="31">
        <label>CppLogging::DebugAppender</label>
        <link refid="classCppLogging_1_1DebugAppender"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="33">
        <label>CppLogging::DebugAppender</label>
        <link refid="classCppLogging_1_1DebugAppender"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
    </collaborationgraph>
    <location file="include/logging/appenders/debug_appender.h" line="26" column="1" bodyfile="include/logging/appenders/debug_appender.h" bodystart="25" bodyend="39"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1DebugAppender_1a18b6456537f6321a60810a6e3155e831" prot="public" virt="virtual"><scope>CppLogging::DebugAppender</scope><name>AppendRecord</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1a904ca30b987c25394616706f2f61093f" prot="public" virt="non-virtual"><scope>CppLogging::DebugAppender</scope><name>DebugAppender</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1aa86c3ffb7964bacfafbc7590048c9848" prot="public" virt="non-virtual"><scope>CppLogging::DebugAppender</scope><name>DebugAppender</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1a30d386a7516fbefdbd5909204f92a5b6" prot="public" virt="non-virtual"><scope>CppLogging::DebugAppender</scope><name>DebugAppender</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1a0e68133c51712cf186cea65ea8e4ddb6" prot="public" virt="virtual"><scope>CppLogging::DebugAppender</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1adf0a9b8d9b6e220c11533b0c03f37105" prot="public" virt="non-virtual"><scope>CppLogging::DebugAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1ad26b8bd8959fea55899db40f882ef2f4" prot="public" virt="non-virtual"><scope>CppLogging::DebugAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1DebugAppender_1a84021216a9e86c376aef4f8d8297ba01" prot="public" virt="virtual"><scope>CppLogging::DebugAppender</scope><name>~DebugAppender</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
