<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1MemoryAppender" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::MemoryAppender</compoundname>
    <basecompoundref refid="classCppLogging_1_1Appender" prot="public" virt="non-virtual">CppLogging::Appender</basecompoundref>
    <includes refid="memory__appender_8h" local="no">memory_appender.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1MemoryAppender_1a432184e53b51fb15f653dd477d21e43a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; CppLogging::MemoryAppender::_buffer</definition>
        <argsstring></argsstring>
        <name>_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="47" column="1" bodyfile="include/logging/appenders/memory_appender.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1ab2078a69922d2784530e460df5e1a4b2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CppLogging::MemoryAppender::MemoryAppender</definition>
        <argsstring>(size_t capacity=0)</argsstring>
        <name>MemoryAppender</name>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize the appender with a given capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- Memory buffer capacity (default is 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="30" column="1" bodyfile="include/logging/appenders/memory_appender.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a21bdc66fd98cd2e01e2bf1bd5a6fb66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::MemoryAppender::MemoryAppender</definition>
        <argsstring>(const MemoryAppender &amp;)=delete</argsstring>
        <name>MemoryAppender</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1ae53f463643e76010698d932dd079586a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::MemoryAppender::MemoryAppender</definition>
        <argsstring>(MemoryAppender &amp;&amp;) noexcept=default</argsstring>
        <name>MemoryAppender</name>
        <param>
          <type><ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a599ee8822f4fd517bf9bb1b99c617d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::MemoryAppender::~MemoryAppender</definition>
        <argsstring>()=default</argsstring>
        <name>~MemoryAppender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a3b90f0a2c02b4663ec79a996ed640320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;</type>
        <definition>MemoryAppender&amp; CppLogging::MemoryAppender::operator=</definition>
        <argsstring>(const MemoryAppender &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a749831ed7cfeec532ead3614f748ffb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;</type>
        <definition>MemoryAppender&amp; CppLogging::MemoryAppender::operator=</definition>
        <argsstring>(MemoryAppender &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1MemoryAppender" kindref="compound">MemoryAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a13df77793cac43b739da469ec82c0e11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt; &amp;</type>
        <definition>std::vector&lt;uint8_t&gt;&amp; CppLogging::MemoryAppender::buffer</definition>
        <argsstring>() noexcept</argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Get memory buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="39" column="1" bodyfile="include/logging/appenders/memory_appender.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1a6ad6452b99e372dfaf4f5403b426888c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; uint8_t &gt; &amp;</type>
        <definition>const std::vector&lt;uint8_t&gt;&amp; CppLogging::MemoryAppender::buffer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Get constant memory buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="41" column="1" bodyfile="include/logging/appenders/memory_appender.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1MemoryAppender_1ab8864deaf25ed3545174e47cc2d6e06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::MemoryAppender::AppendRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>AppendRecord</name>
        <reimplements refid="classCppLogging_1_1Appender_1a770dfe9cd6d1f22a66582bed758a7b4e">AppendRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para>Append the given logging record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/memory_appender.h" line="44" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory appender. </para>
    </briefdescription>
    <detaileddescription>
<para>Memory appender collects all given logging records into growing memory buffer with the given initial capacity.</para>
<para>Not thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="63">
        <label>CppLogging::MemoryAppender</label>
        <link refid="classCppLogging_1_1MemoryAppender"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="65">
        <label>CppLogging::MemoryAppender</label>
        <link refid="classCppLogging_1_1MemoryAppender"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
    </collaborationgraph>
    <location file="include/logging/appenders/memory_appender.h" line="24" column="1" bodyfile="include/logging/appenders/memory_appender.h" bodystart="23" bodyend="48"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1MemoryAppender_1a432184e53b51fb15f653dd477d21e43a" prot="private" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>_buffer</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1ab8864deaf25ed3545174e47cc2d6e06f" prot="public" virt="virtual"><scope>CppLogging::MemoryAppender</scope><name>AppendRecord</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a13df77793cac43b739da469ec82c0e11" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>buffer</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a6ad6452b99e372dfaf4f5403b426888c" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>buffer</name></member>
      <member refid="classCppLogging_1_1Appender_1a6f6ebd942c5045e8b07d100fe5656ee6" prot="public" virt="virtual"><scope>CppLogging::MemoryAppender</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1ab2078a69922d2784530e460df5e1a4b2" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>MemoryAppender</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a21bdc66fd98cd2e01e2bf1bd5a6fb66c" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>MemoryAppender</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1ae53f463643e76010698d932dd079586a" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>MemoryAppender</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a3b90f0a2c02b4663ec79a996ed640320" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a749831ed7cfeec532ead3614f748ffb1" prot="public" virt="non-virtual"><scope>CppLogging::MemoryAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1MemoryAppender_1a599ee8822f4fd517bf9bb1b99c617d1d" prot="public" virt="virtual"><scope>CppLogging::MemoryAppender</scope><name>~MemoryAppender</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
