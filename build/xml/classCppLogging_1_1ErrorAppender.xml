<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1ErrorAppender" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::ErrorAppender</compoundname>
    <basecompoundref refid="classCppLogging_1_1Appender" prot="public" virt="non-virtual">CppLogging::Appender</basecompoundref>
    <includes refid="error__appender_8h" local="no">error_appender.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1abe2c0effcb87d346003d28756fa7a43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::ErrorAppender::ErrorAppender</definition>
        <argsstring>()=default</argsstring>
        <name>ErrorAppender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a6687f19113878c2f39cf18a5673982e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::ErrorAppender::ErrorAppender</definition>
        <argsstring>(const ErrorAppender &amp;)=delete</argsstring>
        <name>ErrorAppender</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a444732715c4a4b206fc45293335a2687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::ErrorAppender::ErrorAppender</definition>
        <argsstring>(ErrorAppender &amp;&amp;) noexcept=default</argsstring>
        <name>ErrorAppender</name>
        <param>
          <type><ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a791f147ab9d3b2f36e22079ed081a419" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::ErrorAppender::~ErrorAppender</definition>
        <argsstring>()=default</argsstring>
        <name>~ErrorAppender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a916e369404596f02dcbe95b9cfec6a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;</type>
        <definition>ErrorAppender&amp; CppLogging::ErrorAppender::operator=</definition>
        <argsstring>(const ErrorAppender &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a2aae79a808ef1ee219ef3190cca3b004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;</type>
        <definition>ErrorAppender&amp; CppLogging::ErrorAppender::operator=</definition>
        <argsstring>(ErrorAppender &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1ErrorAppender" kindref="compound">ErrorAppender</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1a5598abd605f3e925beb2f6ff615c1bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::ErrorAppender::AppendRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>AppendRecord</name>
        <reimplements refid="classCppLogging_1_1Appender_1a770dfe9cd6d1f22a66582bed758a7b4e">AppendRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para>Append the given logging record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1ErrorAppender_1aaf4aa3277fb071417747dfdd2b217b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::ErrorAppender::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classCppLogging_1_1Appender_1a6f6ebd942c5045e8b07d100fe5656ee6">Flush</reimplements>
        <briefdescription>
<para>Flush the logging appender. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/appenders/error_appender.h" line="36" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Error (stderr) appender. </para>
    </briefdescription>
    <detaileddescription>
<para>Error appender prints the given logging record into the console or system error stream (stderr).</para>
<para>Thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="36">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
      <node id="35">
        <label>CppLogging::ErrorAppender</label>
        <link refid="classCppLogging_1_1ErrorAppender"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="38">
        <label>CppLogging::Appender</label>
        <link refid="classCppLogging_1_1Appender"/>
      </node>
      <node id="37">
        <label>CppLogging::ErrorAppender</label>
        <link refid="classCppLogging_1_1ErrorAppender"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/logging/appenders/error_appender.h" line="24" column="1" bodyfile="include/logging/appenders/error_appender.h" bodystart="23" bodyend="37"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1ErrorAppender_1a5598abd605f3e925beb2f6ff615c1bca" prot="public" virt="virtual"><scope>CppLogging::ErrorAppender</scope><name>AppendRecord</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1abe2c0effcb87d346003d28756fa7a43e" prot="public" virt="non-virtual"><scope>CppLogging::ErrorAppender</scope><name>ErrorAppender</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1a6687f19113878c2f39cf18a5673982e8" prot="public" virt="non-virtual"><scope>CppLogging::ErrorAppender</scope><name>ErrorAppender</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1a444732715c4a4b206fc45293335a2687" prot="public" virt="non-virtual"><scope>CppLogging::ErrorAppender</scope><name>ErrorAppender</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1aaf4aa3277fb071417747dfdd2b217b9a" prot="public" virt="virtual"><scope>CppLogging::ErrorAppender</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1a916e369404596f02dcbe95b9cfec6a3d" prot="public" virt="non-virtual"><scope>CppLogging::ErrorAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1a2aae79a808ef1ee219ef3190cca3b004" prot="public" virt="non-virtual"><scope>CppLogging::ErrorAppender</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1ErrorAppender_1a791f147ab9d3b2f36e22079ed081a419" prot="public" virt="virtual"><scope>CppLogging::ErrorAppender</scope><name>~ErrorAppender</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
