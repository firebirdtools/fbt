<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1AsyncProcessor" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::AsyncProcessor</compoundname>
    <basecompoundref refid="classCppLogging_1_1Processor" prot="public" virt="non-virtual">CppLogging::Processor</basecompoundref>
    <includes refid="async__processor_8h" local="no">async_processor.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1AsyncProcessor_1afbfb6287726b439fd36db644723caf3b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CppLogging::AsyncProcessor::_discard_on_overflow</definition>
        <argsstring></argsstring>
        <name>_discard_on_overflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="54" column="1" bodyfile="include/logging/processors/async_processor.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCppLogging_1_1AsyncProcessor_1a886f08f6b6ad2576ab1d9de8f33ff533" prot="private" static="no" mutable="no">
        <type><ref refid="classCppLogging_1_1AsyncBuffer" kindref="compound">AsyncBuffer</ref></type>
        <definition>AsyncBuffer CppLogging::AsyncProcessor::_buffer</definition>
        <argsstring></argsstring>
        <name>_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="55" column="1" bodyfile="include/logging/processors/async_processor.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCppLogging_1_1AsyncProcessor_1a4ea38fab221a13af9c979cd3a0a69448" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread CppLogging::AsyncProcessor::_thread</definition>
        <argsstring></argsstring>
        <name>_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="56" column="1" bodyfile="include/logging/processors/async_processor.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a4a9c0f9667b287bd1d8c77ad4d756602" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::AsyncProcessor::AsyncProcessor</definition>
        <argsstring>(bool discard_on_overflow=false, size_t capacity=4096, const std::function&lt; void()&gt; &amp;on_thread_initialize=[](){}, const std::function&lt; void()&gt; &amp;on_thread_clenup=[](){})</argsstring>
        <name>AsyncProcessor</name>
        <param>
          <type>bool</type>
          <declname>discard_on_overflow</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
          <defval>4096</defval>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>on_thread_initialize</declname>
          <defval>[](){}</defval>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>on_thread_clenup</declname>
          <defval>[](){}</defval>
        </param>
        <briefdescription>
<para>Initialize asynchronous processor with the given overflow policy and buffer capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>discard_on_overflow</parametername>
</parameternamelist>
<parameterdescription>
<para>- Discard logging records on buffer overflow or block and wait (default is false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer capacity in logging records (default is 4096) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on_thread_initialize</parametername>
</parameternamelist>
<parameterdescription>
<para>- Thread initialize handler can be used to initialize priority or affinity of the logging thread (default does nothing) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on_thread_clenup</parametername>
</parameternamelist>
<parameterdescription>
<para>- Thread initialize handler can be used to cleanup priority or affinity of the logging thread (default does nothing) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a9c6d1ec107adb0558fd5bf8191ae80d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::AsyncProcessor::AsyncProcessor</definition>
        <argsstring>(const AsyncProcessor &amp;)=delete</argsstring>
        <name>AsyncProcessor</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1aeeb744467916727b1d52490ed2b67300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::AsyncProcessor::AsyncProcessor</definition>
        <argsstring>(AsyncProcessor &amp;&amp;)=default</argsstring>
        <name>AsyncProcessor</name>
        <param>
          <type><ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1aaefddfb84acccac17fcfb92b8475c171" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::AsyncProcessor::~AsyncProcessor</definition>
        <argsstring>()</argsstring>
        <name>~AsyncProcessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1ae7cc9a80d13afb670c41b0c12fdf267e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;</type>
        <definition>AsyncProcessor&amp; CppLogging::AsyncProcessor::operator=</definition>
        <argsstring>(const AsyncProcessor &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a125db230896c83dae3123d3912dd5932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;</type>
        <definition>AsyncProcessor&amp; CppLogging::AsyncProcessor::operator=</definition>
        <argsstring>(AsyncProcessor &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1AsyncProcessor" kindref="compound">AsyncProcessor</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a3b078b150836eb0e71b410ddb9f11cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool CppLogging::AsyncProcessor::ProcessRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>ProcessRecord</name>
        <reimplements refid="classCppLogging_1_1Processor_1a59da9c9fa2d4087b2273096651bc30cd">ProcessRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para>Process the given logging record through all child filters, layouts and appenders. </para>
        </briefdescription>
        <detaileddescription>
<para>Default behavior of the method will take the given logging record and process it in the following sequence:<itemizedlist>
<listitem><para>all filters (if any present)</para>
</listitem><listitem><para>all layouts (if any present)</para>
</listitem><listitem><para>all appenders (if any present)</para>
</listitem><listitem><para>all sub processors (if any present)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;true&apos; if the logging record was successfully processed, &apos;false&apos; if the logging record was filtered out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a826f628ae6f4b6d496fefedb04154ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::AsyncProcessor::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classCppLogging_1_1Processor_1a60a2737b93a6ea1d60e868392377a976">Flush</reimplements>
        <briefdescription>
<para>Flush the current logging processor. </para>
        </briefdescription>
        <detaileddescription>
<para>Default behavior of the method will flush in the following sequence:<itemizedlist>
<listitem><para>all appenders (if any present)</para>
</listitem><listitem><para>all sub processors (if any present) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="51" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1a80aeb2ad8da13c89afaf23328b5069b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CppLogging::AsyncProcessor::EnqueueRecord</definition>
        <argsstring>(bool discard_on_overflow, Record &amp;record)</argsstring>
        <name>EnqueueRecord</name>
        <param>
          <type>bool</type>
          <declname>discard_on_overflow</declname>
        </param>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1AsyncProcessor_1ad138d18ba40f8d482d8531e7658bfd41" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CppLogging::AsyncProcessor::ProcessBufferedRecords</definition>
        <argsstring>(const std::function&lt; void()&gt; &amp;on_thread_initialize, const std::function&lt; void()&gt; &amp;on_thread_clenup)</argsstring>
        <name>ProcessBufferedRecords</name>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>on_thread_initialize</declname>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>on_thread_clenup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/async_processor.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Asynchronous logging processor. </para>
    </briefdescription>
    <detaileddescription>
<para>Asynchronous logging processor stores the given logging record into thread-safe buffer and process it in the separate thread.</para>
<para>Please note that asynchronous logging processor moves the given logging record (<ref refid="classCppLogging_1_1AsyncProcessor_1a3b078b150836eb0e71b410ddb9f11cf6" kindref="member">ProcessRecord()</ref> method always returns false) into the buffer!</para>
<para>Thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>CppLogging::AsyncProcessor</label>
        <link refid="classCppLogging_1_1AsyncProcessor"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>CppLogging::Processor</label>
        <link refid="classCppLogging_1_1Processor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="15">
        <label>CppLogging::AsyncProcessor</label>
        <link refid="classCppLogging_1_1AsyncProcessor"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>CppLogging::Processor</label>
        <link refid="classCppLogging_1_1Processor"/>
      </node>
    </collaborationgraph>
    <location file="include/logging/processors/async_processor.h" line="32" column="1" bodyfile="include/logging/processors/async_processor.h" bodystart="31" bodyend="60"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1AsyncProcessor_1a886f08f6b6ad2576ab1d9de8f33ff533" prot="private" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>_buffer</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1afbfb6287726b439fd36db644723caf3b" prot="private" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>_discard_on_overflow</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a4ea38fab221a13af9c979cd3a0a69448" prot="private" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>_thread</name></member>
      <member refid="classCppLogging_1_1Processor_1af4d1515ec036a036b3c21377a9c5c91c" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>appenders</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a4a9c0f9667b287bd1d8c77ad4d756602" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>AsyncProcessor</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a9c6d1ec107adb0558fd5bf8191ae80d6" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>AsyncProcessor</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1aeeb744467916727b1d52490ed2b67300" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>AsyncProcessor</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a80aeb2ad8da13c89afaf23328b5069b6" prot="private" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>EnqueueRecord</name></member>
      <member refid="classCppLogging_1_1Processor_1ae7f724429d96b5a76d0bf9d521eda162" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>filters</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a826f628ae6f4b6d496fefedb04154ab6" prot="public" virt="virtual"><scope>CppLogging::AsyncProcessor</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1Processor_1ad4fb13124a6a17750549cf263c1f40b1" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>layouts</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1ae7cc9a80d13afb670c41b0c12fdf267e" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a125db230896c83dae3123d3912dd5932" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Processor_1af0fb712251609787a41aecb4717d64a1" prot="public" virt="non-virtual" ambiguityscope="CppLogging::Processor::"><scope>CppLogging::AsyncProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Processor_1a91a5f1520149d34a37bfc91de66830f7" prot="public" virt="non-virtual" ambiguityscope="CppLogging::Processor::"><scope>CppLogging::AsyncProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1ad138d18ba40f8d482d8531e7658bfd41" prot="private" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>ProcessBufferedRecords</name></member>
      <member refid="classCppLogging_1_1Processor_1ab9e8bf067a254854f6f5bb8a108c1105" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1a18d2e051692b2ef3096ae5cca6a3ee58" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1af909c31ebb473cad9623ca3b84f8cc91" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1ab4d96b6012bee770a07a3f8a25a836a3" prot="public" virt="non-virtual"><scope>CppLogging::AsyncProcessor</scope><name>processors</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1a3b078b150836eb0e71b410ddb9f11cf6" prot="public" virt="virtual"><scope>CppLogging::AsyncProcessor</scope><name>ProcessRecord</name></member>
      <member refid="classCppLogging_1_1AsyncProcessor_1aaefddfb84acccac17fcfb92b8475c171" prot="public" virt="virtual"><scope>CppLogging::AsyncProcessor</scope><name>~AsyncProcessor</name></member>
      <member refid="classCppLogging_1_1Processor_1aa232011a6bc4ba37d8acc56158ea43a7" prot="public" virt="virtual"><scope>CppLogging::AsyncProcessor</scope><name>~Processor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
