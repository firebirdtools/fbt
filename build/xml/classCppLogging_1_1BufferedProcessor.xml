<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classCppLogging_1_1BufferedProcessor" kind="class" language="C++" prot="public">
    <compoundname>CppLogging::BufferedProcessor</compoundname>
    <basecompoundref refid="classCppLogging_1_1Processor" prot="public" virt="non-virtual">CppLogging::Processor</basecompoundref>
    <includes refid="buffered__processor_8h" local="no">buffered_processor.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCppLogging_1_1BufferedProcessor_1a01dcad491f251643abe3e177665f2a00" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t CppLogging::BufferedProcessor::_limit</definition>
        <argsstring></argsstring>
        <name>_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="50" column="1" bodyfile="include/logging/processors/buffered_processor.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCppLogging_1_1BufferedProcessor_1a2129d53199b5afb2f44095fd7f3cda3b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &gt;</type>
        <definition>std::vector&lt;Record&gt; CppLogging::BufferedProcessor::_buffer</definition>
        <argsstring></argsstring>
        <name>_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="51" column="1" bodyfile="include/logging/processors/buffered_processor.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a0f0973f7f53f02ab76d6c72a9893f7d1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CppLogging::BufferedProcessor::BufferedProcessor</definition>
        <argsstring>(size_t limit=65536, size_t capacity=4096)</argsstring>
        <name>BufferedProcessor</name>
        <param>
          <type>size_t</type>
          <declname>limit</declname>
          <defval>65536</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
          <defval>4096</defval>
        </param>
        <briefdescription>
<para>Initialize buffered processor with the given limit and capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer limit in logging records (default is 65536) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer initial capacity in logging records (default is 4096) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="36" column="1" bodyfile="include/logging/processors/buffered_processor.h" bodystart="36" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1acbb10a0b94ba9e8fa85d0081df16db16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::BufferedProcessor::BufferedProcessor</definition>
        <argsstring>(const BufferedProcessor &amp;)=delete</argsstring>
        <name>BufferedProcessor</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a7d439f129c8e1793315cf1f90f01cd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppLogging::BufferedProcessor::BufferedProcessor</definition>
        <argsstring>(BufferedProcessor &amp;&amp;) noexcept=default</argsstring>
        <name>BufferedProcessor</name>
        <param>
          <type><ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a4519f05ece06dafbb40a10f9bd1bbc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual CppLogging::BufferedProcessor::~BufferedProcessor</definition>
        <argsstring>()=default</argsstring>
        <name>~BufferedProcessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a6e72a2526b79f6effcb3b080f190e330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;</type>
        <definition>BufferedProcessor&amp; CppLogging::BufferedProcessor::operator=</definition>
        <argsstring>(const BufferedProcessor &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a71b19d229c319dd963d5cf583478e6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;</type>
        <definition>BufferedProcessor&amp; CppLogging::BufferedProcessor::operator=</definition>
        <argsstring>(BufferedProcessor &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classCppLogging_1_1BufferedProcessor" kindref="compound">BufferedProcessor</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a30701e34be19af8d41530b9f9d1cf369" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool CppLogging::BufferedProcessor::ProcessRecord</definition>
        <argsstring>(Record &amp;record) override</argsstring>
        <name>ProcessRecord</name>
        <reimplements refid="classCppLogging_1_1Processor_1a59da9c9fa2d4087b2273096651bc30cd">ProcessRecord</reimplements>
        <param>
          <type><ref refid="classCppLogging_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
<para>Process the given logging record through all child filters, layouts and appenders. </para>
        </briefdescription>
        <detaileddescription>
<para>Default behavior of the method will take the given logging record and process it in the following sequence:<itemizedlist>
<listitem><para>all filters (if any present)</para>
</listitem><listitem><para>all layouts (if any present)</para>
</listitem><listitem><para>all appenders (if any present)</para>
</listitem><listitem><para>all sub processors (if any present)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>record</parametername>
</parameternamelist>
<parameterdescription>
<para>- Logging record </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;true&apos; if the logging record was successfully processed, &apos;false&apos; if the logging record was filtered out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a7066881ada040a09270c4f04409d7bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppLogging::BufferedProcessor::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classCppLogging_1_1Processor_1a60a2737b93a6ea1d60e868392377a976">Flush</reimplements>
        <briefdescription>
<para>Flush the current logging processor. </para>
        </briefdescription>
        <detaileddescription>
<para>Default behavior of the method will flush in the following sequence:<itemizedlist>
<listitem><para>all appenders (if any present)</para>
</listitem><listitem><para>all sub processors (if any present) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="47" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCppLogging_1_1BufferedProcessor_1a934f17223824d785b97a1d9de0232ce9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CppLogging::BufferedProcessor::ProcessBufferedRecords</definition>
        <argsstring>()</argsstring>
        <name>ProcessBufferedRecords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/processors/buffered_processor.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Buffered logging processor. </para>
    </briefdescription>
    <detaileddescription>
<para>Buffered logging processor stores all logging records in the limited size buffer until <ref refid="classCppLogging_1_1BufferedProcessor_1a7066881ada040a09270c4f04409d7bb3" kindref="member">Flush()</ref> method is invoked or buffer has not enough space.</para>
<para>Please note that buffered logging processor moves the given logging record (<ref refid="classCppLogging_1_1BufferedProcessor_1a30701e34be19af8d41530b9f9d1cf369" kindref="member">ProcessRecord()</ref> method always returns false) into the buffer!</para>
<para>Not thread-safe. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="22">
        <label>CppLogging::Processor</label>
        <link refid="classCppLogging_1_1Processor"/>
      </node>
      <node id="21">
        <label>CppLogging::BufferedProcessor</label>
        <link refid="classCppLogging_1_1BufferedProcessor"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="24">
        <label>CppLogging::Processor</label>
        <link refid="classCppLogging_1_1Processor"/>
      </node>
      <node id="23">
        <label>CppLogging::BufferedProcessor</label>
        <link refid="classCppLogging_1_1BufferedProcessor"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/logging/processors/buffered_processor.h" line="29" column="1" bodyfile="include/logging/processors/buffered_processor.h" bodystart="28" bodyend="54"/>
    <listofallmembers>
      <member refid="classCppLogging_1_1BufferedProcessor_1a2129d53199b5afb2f44095fd7f3cda3b" prot="private" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>_buffer</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a01dcad491f251643abe3e177665f2a00" prot="private" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>_limit</name></member>
      <member refid="classCppLogging_1_1Processor_1af4d1515ec036a036b3c21377a9c5c91c" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>appenders</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a0f0973f7f53f02ab76d6c72a9893f7d1" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>BufferedProcessor</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1acbb10a0b94ba9e8fa85d0081df16db16" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>BufferedProcessor</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a7d439f129c8e1793315cf1f90f01cd4a" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>BufferedProcessor</name></member>
      <member refid="classCppLogging_1_1Processor_1ae7f724429d96b5a76d0bf9d521eda162" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>filters</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a7066881ada040a09270c4f04409d7bb3" prot="public" virt="virtual"><scope>CppLogging::BufferedProcessor</scope><name>Flush</name></member>
      <member refid="classCppLogging_1_1Processor_1ad4fb13124a6a17750549cf263c1f40b1" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>layouts</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a6e72a2526b79f6effcb3b080f190e330" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a71b19d229c319dd963d5cf583478e6c8" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Processor_1af0fb712251609787a41aecb4717d64a1" prot="public" virt="non-virtual" ambiguityscope="CppLogging::Processor::"><scope>CppLogging::BufferedProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1Processor_1a91a5f1520149d34a37bfc91de66830f7" prot="public" virt="non-virtual" ambiguityscope="CppLogging::Processor::"><scope>CppLogging::BufferedProcessor</scope><name>operator=</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a934f17223824d785b97a1d9de0232ce9" prot="private" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>ProcessBufferedRecords</name></member>
      <member refid="classCppLogging_1_1Processor_1ab9e8bf067a254854f6f5bb8a108c1105" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1a18d2e051692b2ef3096ae5cca6a3ee58" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1af909c31ebb473cad9623ca3b84f8cc91" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>Processor</name></member>
      <member refid="classCppLogging_1_1Processor_1ab4d96b6012bee770a07a3f8a25a836a3" prot="public" virt="non-virtual"><scope>CppLogging::BufferedProcessor</scope><name>processors</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a30701e34be19af8d41530b9f9d1cf369" prot="public" virt="virtual"><scope>CppLogging::BufferedProcessor</scope><name>ProcessRecord</name></member>
      <member refid="classCppLogging_1_1BufferedProcessor_1a4519f05ece06dafbb40a10f9bd1bbc6c" prot="public" virt="virtual"><scope>CppLogging::BufferedProcessor</scope><name>~BufferedProcessor</name></member>
      <member refid="classCppLogging_1_1Processor_1aa232011a6bc4ba37d8acc56158ea43a7" prot="public" virt="virtual"><scope>CppLogging::BufferedProcessor</scope><name>~Processor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
