.TH "CppLogging::Record" 3 "Thu Jan 17 2019" "CppLogging" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CppLogging::Record \- Logging record\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <record\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRecord\fP (const \fBRecord\fP &)=default"
.br
.ti -1c
.RI "\fBRecord\fP (\fBRecord\fP &&)=default"
.br
.ti -1c
.RI "\fBRecord\fP & \fBoperator=\fP (const \fBRecord\fP &)=default"
.br
.ti -1c
.RI "\fBRecord\fP & \fBoperator=\fP (\fBRecord\fP &&)=default"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Args> void \fBFormat\fP (const char *pattern, const Args &\&.\&.\&. args)"
.br
.RI "Format message of the logging record\&. "
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Clear logging record\&. "
.ti -1c
.RI "void \fBswap\fP (\fBRecord\fP &record) noexcept"
.br
.RI "Swap two instances\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint64_t \fBtimestamp\fP"
.br
.RI "Timestamp of the logging record\&. "
.ti -1c
.RI "uint64_t \fBthread\fP"
.br
.RI "Thread Id of the logging record\&. "
.ti -1c
.RI "\fBLevel\fP \fBlevel\fP"
.br
.RI "Level of the logging record\&. "
.ti -1c
.RI "std::string \fBlogger\fP"
.br
.RI "\fBLogger\fP name of the logging record\&. "
.ti -1c
.RI "std::string \fBmessage\fP"
.br
.RI "Message of the logging record\&. "
.ti -1c
.RI "std::vector< uint8_t > \fBbuffer\fP"
.br
.RI "Buffer of the logging record\&. "
.ti -1c
.RI "std::vector< uint8_t > \fBraw\fP"
.br
.RI "\fBRecord\fP content after layout\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "void \fBswap\fP (\fBRecord\fP &record1, \fBRecord\fP &record2) noexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 
Logging record\&. 

Logging record encapsulates all required fields in a single instance:
.IP "\(bu" 2
timestamp
.IP "\(bu" 2
thread Id
.IP "\(bu" 2
level
.IP "\(bu" 2
logger
.IP "\(bu" 2
message
.IP "\(bu" 2
buffer
.PP
.PP
Logging records are created inside \fBLogger\fP class and processed by logging appenders, filters and layouts\&.
.PP
Not thread-safe\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for CppLogging from the source code\&.
