.TH "CppLogging::Trigger" 3 "Thu Jan 17 2019" "CppLogging" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CppLogging::Trigger \- Logging trigger\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <trigger\&.h>\fP
.PP
Inherits \fBCppLogging::Filter\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTrigger\fP (bool state=true)"
.br
.RI "Initialize trigger with an initial logging state (enabled or disabled) "
.ti -1c
.RI "\fBTrigger\fP (const \fBTrigger\fP &)=delete"
.br
.ti -1c
.RI "\fBTrigger\fP (\fBTrigger\fP &&)=default"
.br
.ti -1c
.RI "\fBTrigger\fP & \fBoperator=\fP (const \fBTrigger\fP &)=delete"
.br
.ti -1c
.RI "\fBTrigger\fP & \fBoperator=\fP (\fBTrigger\fP &&)=default"
.br
.ti -1c
.RI "bool \fBIsEnabled\fP () noexcept"
.br
.RI "Is logging enabled? "
.ti -1c
.RI "void \fBEnable\fP () noexcept"
.br
.RI "Enable logging\&. "
.ti -1c
.RI "void \fBDisable\fP () noexcept"
.br
.RI "Disable logging\&. "
.ti -1c
.RI "void \fBToggle\fP () noexcept"
.br
.RI "Toggle logging\&. "
.ti -1c
.RI "bool \fBFilterRecord\fP (\fBRecord\fP &record) override"
.br
.RI "\fBFilter\fP the given logging record\&. "
.in -1c
.SH "Detailed Description"
.PP 
Logging trigger\&. 

Logging trigger is a special filter that allows to enable or disable logging\&.
.PP
Thread-safe\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CppLogging::Trigger::Trigger (bool state = \fCtrue\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Initialize trigger with an initial logging state (enabled or disabled) 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP - Initial logging state (default is true) 
.RE
.PP

.PP
.nf
31 : _state(state) {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool CppLogging::Trigger::FilterRecord (\fBRecord\fP & record)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
\fBFilter\fP the given logging record\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrecord\fP - Logging record 
.RE
.PP
\fBReturns:\fP
.RS 4
'true' if the logging record should be processed, 'false' if the logging record was filtered out 
.RE
.PP

.PP
Implements \fBCppLogging::Filter\fP\&.
.PP
.nf
51     { return _state; }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for CppLogging from the source code\&.
